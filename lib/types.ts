import type { ExtendedRecordMap } from 'notion-types'
import type { ParsedUrlQuery } from 'querystring'
import type { Block } from 'notion-types'

export * from 'notion-types'

export type NavigationStyle = 'default' | 'custom'

export interface PageError {
  message?: string
  statusCode: number
}

export interface PageProps {
  site: Site
  recordMap?: ExtendedRecordMap
  pageId?: string
  error?: any
  siteMap?: SiteMap
  isMobile?: boolean
  homeRecordMaps?: { [pageId: string]: ExtendedRecordMap }
  isPrivate?: boolean
}

export interface Params extends ParsedUrlQuery {
  pageId: string
}

export type Site = {
  domain: string
  name: string

  rootNotionPageId: string | null
  rootNotionSpaceId?: string | null
  rootNotionDatabaseId?: string | null

  // settings
  html?: string
  fontFamily?: string
  darkMode?: boolean
  previewImages?: boolean

  // opengraph metadata
  description?: string
  image?: string
}

/**
 * Represents the essential properties of a page, derived from the Notion DB.
 * This is a flat structure, easy to store in a map.
 */
export interface PageInfo {
  // From Notion DB
  title: string
  pageId: string
  type: 'Post' | 'Category' | 'Home' | 'Unknown'
  slug: string
  parentPageId: string | null
  childrenPageIds: string[]
  language: string | null
  translationOf: string[]
  public: boolean | null
  description: string | null
  published: string | null
  lastUpdated: string | null
  coverImage?: string | null
  coverImageBlock?: Block // Add block for mapImageUrl

  // Generated by our code
  parent?: PageInfo
  children: PageInfo[]
  translations: PageInfo[]
  canonicalPageUrl?: string
}

/**
 * The main data structure holding all site information after being processed.
 */
export type SiteMap = {
  site: Site
  pageInfoMap: Record<string, PageInfo>
  canonicalPageMap: CanonicalPageMap
  navigationTree: PageInfo[]
}

export interface CanonicalPageMap {
  [canonicalPageId: string]: string
}

export interface PageUrlOverridesMap {
  // maps from a URL path to the notion page id the page should be resolved to
  // (this overrides the built-in URL path generation for these pages)
  [pagePath:string]: string
}

export interface PageUrlOverridesInverseMap {
  // maps from a notion page id to the URL path the page should be resolved to
  // (this overrides the built-in URL path generation for these pages)
  [pageId: string]: string
}